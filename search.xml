<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My-First-Reverse-Analysis</title>
    <url>/2025/10/07/My-First-Reverse-Analysis/</url>
    <content><![CDATA[<p>题目名：[LitCTF 2023] 世界上最棒的程序员</p>
<p>本文为该题的解题报告（Writeup），对可执行程序进行静态&#x2F;动态分析并给出复现过程与结论。</p>
<h2 id="环境与运行"><a href="#环境与运行" class="headerlink" title="环境与运行"></a>环境与运行</h2><p>双击打开程序后，控制台会输出如下提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello CTFer~!</span><br><span class="line">I am Re_sign.</span><br><span class="line">Input 2 numbers which are the C0RE of the computer</span><br></pre></td></tr></table></figure>

<p>接着程序会进入分析阶段（可以用 IDA 打开并按 F5 查看伪代码）。下面是 <code>main</code> 的伪代码片段：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __main();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello CTFer~!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I am Re_sign.\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input 2 numbers which are the C0RE of the computer\n&quot;</span>);</span><br><span class="line">  start();</span><br><span class="line">  Sleep(<span class="number">0x7D0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>start()</code> 函数负责读取输入并判断是否满足条件，下面是其伪代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> Num_2;</span><br><span class="line">  <span class="type">int</span> Num_1[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, Num_1);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Num_2);</span><br><span class="line">  <span class="keyword">if</span> ( Num_1[<span class="number">0</span>] + Num_2 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Flag: LitCTF&#123;I_am_the_best_programmer_ever&#125;\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Wrong!Try again!\n&quot;</span>);</span><br><span class="line">    start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析与思路"><a href="#分析与思路" class="headerlink" title="分析与思路"></a>分析与思路</h2><p>从 <code>start()</code> 可以看到，程序通过两次 <code>scanf(&quot;%d&quot;, ...)</code> 读取两个整数，分别存入 <code>Num_1[0]</code>（数组第一个元素）和 <code>Num_2</code>。随后判断条件为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Num_1[0] + Num_2 == 1</span><br></pre></td></tr></table></figure>

<p>也就是说，只要两次输入的整数之和等于 1，程序就会打印 flag。最简单满足该条件的组合是 <code>0</code> 和 <code>1</code>（或 <code>1</code> 和 <code>0</code>）。</p>
<p>另外注意：flag 是直接硬编码在程序输出里的，不需要绕过任何加密或复杂的校验逻辑。</p>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><ol>
<li>运行程序。</li>
<li>按提示输入两个数字，使它们相加等于 1，例如：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入1: 0</span><br><span class="line">输入2: 1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>程序会输出 flag。</li>
</ol>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>程序输出的 flag 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flag: LitCTF&#123;I_am_the_best_programmer_ever&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本题为入门级逆向题，核心在于查看程序的输入与对输入的简单校验逻辑，flag 被明文写在程序中，直接触发输出即可。对于类似题目，先查看字符串、输入逻辑和条件判断通常能快速定位解法。</p>
<hr>
<h2 id="为什么-0-和-1-是计算的“核心”"><a href="#为什么-0-和-1-是计算的“核心”" class="headerlink" title="为什么 0 和 1 是计算的“核心”"></a>为什么 0 和 1 是计算的“核心”</h2><p>0 和 1 构成了二进制体系——这是最简单、却也是完备的信息表示方法。下面简要说明它们的起源与重要性：</p>
<ul>
<li>起源：1 作为计数单位由来已久；0 早期作为占位符出现于美索不达米亚，作为独立数的概念与算法在印度数学中完善，后来传入欧洲，成为现代十进制和算术的基础。</li>
<li>二进制与逻辑：莱布尼茨在 17 世纪提出二进制，并受到《易经》阴阳思想启发。19 世纪布尔形式化逻辑（布尔代数），为用代数表示逻辑判断提供理论基础。</li>
<li>物理实现：电子器件天然存在两种稳定状态（通&#x2F;断、低&#x2F;高电压），用 0&#x2F;1 表示既直观又可靠；香农将布尔代数用于电路设计，证明用开关电路即可实现任意逻辑功能。</li>
<li>工程价值：比特（bit）是信息的最小单位，任意数据都可被编码为比特序列；布尔门（AND&#x2F;OR&#x2F;NOT&#x2F;NAND&#x2F;NOR）能构成任意计算逻辑，支持图灵完备的实现。</li>
</ul>
<p>在本题中，作者用“输入两个数字的和等于 1”这一简单条件恰好利用了 0 与 1 的二值特性：最小、直接且易于触发。flag 被写入程序内部，直接输入 0 和 1 即可得到结果，既体现了二值逻辑的直观性，也适合作为入门级逆向题的设计思路。</p>
]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>reverse</tag>
        <tag>CTF</tag>
        <tag>二进制逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[NSSCTF 2025 入门题目] 花指令</title>
    <url>/2025/10/19/NSSCTF2025%E5%85%A5%E9%97%A8%E9%A2%98%E7%9B%AE-%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><p><strong>题目名称</strong>: [NSSCTF 2025 入门题目] 花指令<br><strong>类型</strong>: Reverse Engineering<br><strong>难度</strong>: 入门</p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="第一步：文件分析"><a href="#第一步：文件分析" class="headerlink" title="第一步：文件分析"></a>第一步：文件分析</h3><p>先用 DIE 打开，发现是 32 位无壳可执行文件。</p>
<h3 id="第二步：逆向分析"><a href="#第二步：逆向分析" class="headerlink" title="第二步：逆向分析"></a>第二步：逆向分析</h3><p>再用 IDA 打开，F5 反编译 main 函数可以看到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> len3; <span class="comment">// [esp+F4h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">size_t</span> len2; <span class="comment">// [esp+100h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> len1; <span class="comment">// [esp+10Ch] [ebp-14h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> len; <span class="comment">// [esp+118h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(JMC_flag: &amp;B9417AA6_____FileName_cpp);</span><br><span class="line">  j__printf(Format: <span class="string">&quot;Welcome to the world of flowers\n&quot;</span>);</span><br><span class="line">  j__scanf(Format: <span class="string">&quot;%99s&quot;</span>, input);</span><br><span class="line">  len = j__strlen(Str: input);</span><br><span class="line">  len1 = len / <span class="number">3</span>;</span><br><span class="line">  len2 = len / <span class="number">3</span>;</span><br><span class="line">  len3 = len - len / <span class="number">3</span> - len / <span class="number">3</span>;</span><br><span class="line">  _strncpy(Destination: part1, Source: input, Count: len / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(len / <span class="number">3</span>) &gt;= <span class="number">0x22</span> )</span><br><span class="line">    j____report_rangecheckfailure();</span><br><span class="line">  part1[len / <span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">  _strncpy(Destination: part2, Source: &amp;input[len1], Count: len2);</span><br><span class="line">  part2[len2] = <span class="number">0</span>;</span><br><span class="line">  _strncpy(Destination: part3, Source: &amp;input[len1 + len2], Count: len3);</span><br><span class="line">  <span class="keyword">if</span> ( len3 &gt;= <span class="number">0x22</span> )</span><br><span class="line">    j____report_rangecheckfailure();</span><br><span class="line">  part3[len3] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( flower_1(a: part1) &amp;&amp; flower_2(a: part2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( flower_3(a: part3) )</span><br><span class="line">      j__printf(Format: &amp;Format_);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      j__printf(Format: <span class="string">&quot;GG\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    j__printf(Format: <span class="string">&quot;GG\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三步：识别花指令"><a href="#第三步：识别花指令" class="headerlink" title="第三步：识别花指令"></a>第三步：识别花指令</h3><p>很容易看出来 flower1、flower2、flower3 就是这道题需要去花指令的函数。这三个函数都可以通过 U 键处理红色报错，然后 NOP 掉垃圾字节再按 C 键转化为代码来完成去花。</p>
<p>观察去完花的 flower1、flower2、flower3 发现都是简单的异或加密：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">flower_1</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+DCh] [ebp-20h]</span></span><br><span class="line">  <span class="type">char</span> answer1[<span class="number">20</span>]; <span class="comment">// [esp+E8h] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  answer1[<span class="number">0</span>] = <span class="number">13</span>;</span><br><span class="line">  qmemcpy(&amp;answer1[<span class="number">1</span>], <span class="string">&quot;:2/8)8]VX^\t!&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  answer1[<span class="number">13</span>] = <span class="number">13</span>;</span><br><span class="line">  <span class="comment">// &quot;Ciallo&quot;</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; j__strlen(Str: a) &amp;&amp; (<span class="type">char</span>)(key[i % j__strlen(Str: key)] ^ a[i]) == answer1[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">flower_2</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+DCh] [ebp-20h]</span></span><br><span class="line">  <span class="type">char</span> answer2[<span class="number">20</span>]; <span class="comment">// [esp+E8h] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(answer2, <span class="string">&quot;&amp;D\a^\\_n]&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  answer2[<span class="number">8</span>] = <span class="number">2</span>;</span><br><span class="line">  qmemcpy(&amp;answer2[<span class="number">9</span>], <span class="string">&quot;]UB\&quot;P&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; j__strlen(Str: a); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">char</span>)(key[i % j__strlen(Str: key)] ^ a[i]) != answer2[i] )<span class="comment">// &quot;Ciallo&quot;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">flower_3</span><span class="params">(<span class="type">char</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+DCh] [ebp-20h]</span></span><br><span class="line">  <span class="type">char</span> answer1[<span class="number">20</span>]; <span class="comment">// [esp+E8h] [ebp-14h] BYREF</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(answer1, <span class="string">&quot;&#x27;\\LT\bVr_P_\\\vv\bS&quot;</span>, <span class="number">15</span>);</span><br><span class="line">  answer1[<span class="number">15</span>] = <span class="number">17</span>;</span><br><span class="line">  <span class="comment">// &quot;Ciallo&quot;</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; j__strlen(Str: a) &amp;&amp; (<span class="type">char</span>)(key[i % j__strlen(Str: key)] ^ a[i]) == answer1[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步：编写解密脚本"><a href="#第四步：编写解密脚本" class="headerlink" title="第四步：编写解密脚本"></a>第四步：编写解密脚本</h3><p>很容易写出解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">answer1 = [<span class="number">0xd</span>, <span class="number">0x3a</span>, <span class="number">0x32</span>, <span class="number">0x2f</span>, <span class="number">0x38</span>, <span class="number">0x29</span>, <span class="number">0x38</span>, <span class="number">0x5d</span>, <span class="number">0x56</span>, <span class="number">0x58</span>, <span class="number">0x5e</span>, <span class="number">0x9</span>, <span class="number">0x21</span>, <span class="number">0xd</span>]</span><br><span class="line">key = [<span class="number">0x43</span>, <span class="number">0x69</span>, <span class="number">0x61</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>]</span><br><span class="line">a=[]</span><br><span class="line">[a.append(answer1[i]^key[i%<span class="number">6</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">answer2 = [<span class="number">0x26</span>, <span class="number">0x44</span>, <span class="number">0x7</span>, <span class="number">0x5e</span>, <span class="number">0x5c</span>, <span class="number">0x5f</span>, <span class="number">0x6e</span>, <span class="number">0x5d</span>, <span class="number">0x2</span>, <span class="number">0x5d</span>, <span class="number">0x55</span>, <span class="number">0x42</span>, <span class="number">0x22</span>, <span class="number">0x50</span>]</span><br><span class="line">[a.append(answer2[i]^key[i%<span class="number">6</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">answer3  = [<span class="number">0x27</span>, <span class="number">0x5c</span>, <span class="number">0x4c</span>, <span class="number">0x54</span>, <span class="number">0x8</span>, <span class="number">0x56</span>, <span class="number">0x72</span>, <span class="number">0x5f</span>, <span class="number">0x50</span>, <span class="number">0x5f</span>, <span class="number">0x5c</span>, <span class="number">0xb</span>, <span class="number">0x76</span>, <span class="number">0x8</span>, <span class="number">0x53</span>, <span class="number">0x11</span>]</span><br><span class="line">[a.append(answer3[i]^key[i%<span class="number">6</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">[<span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br></pre></td></tr></table></figure>

<h3 id="第五步：运行脚本"><a href="#第五步：运行脚本" class="headerlink" title="第五步：运行脚本"></a>第五步：运行脚本</h3><p>运行脚本得到 flag：<code>NSSCTF{4742fbde-f200-4c19-a9d5-8d916130d5a2}</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一道经典的花指令入门题目，主要考察以下能力点：</p>
<ul>
<li>静态分析能力：熟练使用 IDA Pro 进行反汇编和伪代码分析</li>
<li>花指令识别：准确识别并去除花指令</li>
<li>异或解密：理解简单的异或加密逻辑并实现解密算法</li>
</ul>
<p>通过仔细分析程序的加密逻辑和去除花指令，最终成功破解了 flag。</p>
<p>本文记录了个人解题思路和学习过程，旨在交流技术心得。如有错误欢迎指正！</p>
]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
        <tag>花指令</tag>
        <tag>IDA Pro</tag>
        <tag>异或解密</tag>
      </tags>
  </entry>
  <entry>
    <title>[HUBUCTF 2022 新生赛] simple_RE 题解</title>
    <url>/2025/10/10/%5BHUBUCTF%202022%20%E6%96%B0%E7%94%9F%E8%B5%9B%5Dsimple_RE/</url>
    <content><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><p><strong>题目名称</strong>: [HUBUCTF 2022 新生赛] simple_RE<br><strong>类型</strong>: Reverse Engineering<br><strong>难度</strong>: 简单</p>
<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="第一步：文件分析"><a href="#第一步：文件分析" class="headerlink" title="第一步：文件分析"></a>第一步：文件分析</h3><p>拖入 die 进行查壳分析，发现程序是 64 位、小端序、无壳的可执行文件。</p>
<h3 id="第二步：逆向分析"><a href="#第二步：逆向分析" class="headerlink" title="第二步：逆向分析"></a>第二步：逆向分析</h3><p>用 IDA 打开，F5 查看伪代码。主函数如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> p_Size; <span class="comment">// [rsp+24h] [rbp-44h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *Buf1; <span class="comment">// [rsp+28h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">56</span>]; <span class="comment">// [rsp+30h] [rbp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_401770(argc: argc, argv: argv, envp: envp);</span><br><span class="line">  <span class="built_in">printf</span>(Format: <span class="string">&quot;please input the flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(Format: <span class="string">&quot;%s&quot;</span>, v6);</span><br><span class="line">  Buf1 = <span class="number">0</span>;</span><br><span class="line">  sub_401570(a1: v6, p_Buf1: &amp;Buf1, p_Size: &amp;p_Size);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(</span><br><span class="line">          Buf1: Buf1,</span><br><span class="line">          Buf2: a5mc58bphliax7j,                      <span class="comment">// &quot;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&quot;</span></span><br><span class="line">          Size: p_Size) )</span><br><span class="line">    <span class="built_in">printf</span>(Format: <span class="string">&quot;\nsuccess!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(Format: <span class="string">&quot;\nfailed!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( Buf1 )</span><br><span class="line">    <span class="built_in">free</span>(Buf1: Buf1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序逻辑很简单：输入 flag，调用处理函数，然后比较结果。</p>
<h3 id="第三步：深入分析编码函数"><a href="#第三步：深入分析编码函数" class="headerlink" title="第三步：深入分析编码函数"></a>第三步：深入分析编码函数</h3><p>双击进入 <code>sub_401570</code> 函数内部（已有部分注释）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_401570</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, <span class="type">void</span> **p_Buf1, <span class="type">int</span> *p_Size)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> lenth; <span class="comment">// r15d</span></span><br><span class="line">  <span class="type">int</span> n2; <span class="comment">// r12d</span></span><br><span class="line">  <span class="type">int</span> _______; <span class="comment">// r13d</span></span><br><span class="line">  __int64 ________1; <span class="comment">// r14</span></span><br><span class="line">  _BYTE *v10; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// r9</span></span><br><span class="line">  __int64 three_i; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v13; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// r10</span></span><br><span class="line"></span><br><span class="line">  lenth = <span class="built_in">strlen</span>(Str: a1);</span><br><span class="line">  n2 = lenth % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( lenth % <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _______ = <span class="number">4</span> * (lenth / <span class="number">3</span>) + <span class="number">4</span>;</span><br><span class="line">    ________1 = _______;</span><br><span class="line">    v10 = <span class="built_in">malloc</span>(Size: _______ + <span class="number">1LL</span>);</span><br><span class="line">    v10[_______] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( lenth &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    _______ = <span class="number">4</span> * (lenth / <span class="number">3</span>);</span><br><span class="line">    ________1 = _______;</span><br><span class="line">    v10 = <span class="built_in">malloc</span>(Size: _______ + <span class="number">1LL</span>);</span><br><span class="line">    v10[_______] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( lenth &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = v10;</span><br><span class="line">  three_i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 += <span class="number">4</span>;</span><br><span class="line">    v13 = a1[three_i];</span><br><span class="line">    *(v11 - <span class="number">4</span>) = aQvejafhmuyjbac[v13 &gt;&gt; <span class="number">2</span>];     <span class="comment">// 00AAAAAA</span></span><br><span class="line">    v14 = a1[three_i + <span class="number">1</span>];</span><br><span class="line">    *(v11 - <span class="number">3</span>) = aQvejafhmuyjbac[(v14 &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * v13) &amp; <span class="number">48</span>]; <span class="comment">// 0000BBBB + 00AA0000 = 00AABBBB</span></span><br><span class="line">    v15 = a1[three_i + <span class="number">2</span>];</span><br><span class="line">    three_i += <span class="number">3</span>;</span><br><span class="line">    *(v11 - <span class="number">2</span>) = aQvejafhmuyjbac[(v15 &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * v14) &amp; <span class="number">60</span>];  <span class="comment">// 000000CC + 00BBBB00 = 00BBBBCC</span></span><br><span class="line">    *(v11 - <span class="number">1</span>) = aQvejafhmuyjbac[v15 &amp; <span class="number">0x3F</span>];   <span class="comment">// 00CCCCCC</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( lenth &gt; (<span class="type">int</span>)three_i );</span><br><span class="line"></span><br><span class="line">LABEL_5:</span><br><span class="line">  <span class="keyword">if</span> ( n2 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10[________1 - <span class="number">2</span>] = <span class="number">61</span>;</span><br><span class="line">    v10[________1 - <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( n2 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10[________1 - <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">LABEL_8:</span><br><span class="line">  *p_Buf1 = v10;</span><br><span class="line">  *p_Size = _______;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步：识别编码模式"><a href="#第四步：识别编码模式" class="headerlink" title="第四步：识别编码模式"></a>第四步：识别编码模式</h3><p>通过分析可以看出，这是一个使用自定义字符集的 Base64 编码实现。虽然可以使用在线解码工具快速得到结果，但为了更好地理解编码过程，我们来手动编写解码脚本。</p>
<p>首先，在 main 函数中找到硬编码的密文：<code>5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==</code></p>
<p>然后在 <code>sub_401570</code> 函数中找到 Base64 字符映射表：<code>qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD</code></p>
<p>理解编码逻辑后，手动实现对应的解码脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc=(<span class="string">&#x27;5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8==&#x27;</span>)</span><br><span class="line">enc_=[]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> enc:</span><br><span class="line">    enc_.append(<span class="built_in">ord</span>(a))</span><br><span class="line">key = [<span class="number">0x71</span>, <span class="number">0x76</span>, <span class="number">0x45</span>, <span class="number">0x4a</span>, <span class="number">0x41</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x6d</span>, <span class="number">0x55</span>, <span class="number">0x59</span>, <span class="number">0x6a</span>, <span class="number">0x42</span>, <span class="number">0x61</span>, <span class="number">0x63</span>, <span class="number">0x2b</span>, <span class="number">0x75</span>, <span class="number">0x38</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0x35</span>, <span class="number">0x6e</span>, <span class="number">0x39</span>, <span class="number">0x4f</span>, <span class="number">0x64</span>, <span class="number">0x31</span>, <span class="number">0x37</span>, <span class="number">0x46</span>, <span class="number">0x72</span>, <span class="number">0x49</span>, <span class="number">0x43</span>, <span class="number">0x4c</span>, <span class="number">0x2f</span>, <span class="number">0x58</span>, <span class="number">0x30</span>, <span class="number">0x67</span>, <span class="number">0x56</span>, <span class="number">0x74</span>, <span class="number">0x4d</span>, <span class="number">0x34</span>, <span class="number">0x51</span>, <span class="number">0x6b</span>, <span class="number">0x36</span>, <span class="number">0x54</span>, <span class="number">0x32</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x77</span>, <span class="number">0x4e</span>, <span class="number">0x53</span>, <span class="number">0x73</span>, <span class="number">0x79</span>, <span class="number">0x6f</span>, <span class="number">0x65</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6c</span>, <span class="number">0x78</span>, <span class="number">0x57</span>, <span class="number">0x4b</span>, <span class="number">0x47</span>, <span class="number">0x5a</span>, <span class="number">0x70</span>, <span class="number">0x52</span>, <span class="number">0x44</span>, <span class="number">0x0</span>]</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(enc_):</span><br><span class="line">    i+=<span class="number">4</span></span><br><span class="line">    v1=key.index(enc_[i-<span class="number">4</span>])</span><br><span class="line">    v2=key.index(enc_[i-<span class="number">3</span>])</span><br><span class="line">    v13=(v2&amp;<span class="number">0b00110000</span>)&gt;&gt;<span class="number">4</span>|(v1&amp;<span class="number">0b00111111</span>)&lt;&lt;<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> enc_[i-<span class="number">2</span>]==<span class="built_in">ord</span>(<span class="string">&#x27;=&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(v13),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    v3=key.index(enc_[i-<span class="number">2</span>])</span><br><span class="line">    v14=(v3&amp;<span class="number">0b00111100</span>)&gt;&gt;<span class="number">2</span>|(v2&amp;<span class="number">0b00001111</span>)&lt;&lt;<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> enc_[i-<span class="number">1</span>]==(<span class="string">&#x27;=&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(v14),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    v4=key.index(enc_[i-<span class="number">1</span>])</span><br><span class="line">    v15=v4|(v3&amp;<span class="number">0b000011</span>)&lt;&lt;<span class="number">6</span></span><br><span class="line">    [<span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> (v13,v14,v15)]</span><br></pre></td></tr></table></figure>
<h3 id="第五步：解码验证"><a href="#第五步：解码验证" class="headerlink" title="第五步：解码验证"></a>第五步：解码验证</h3><p>运行脚本，成功得到 flag：NSSCTF{a8d4347722800e72e34e1aba3fe914ae}</p>
<p>解题总结<br>这是一道经典的逆向工程题目，主要考察以下能力点：</p>
<p>静态分析能力：熟练使用 IDA Pro 进行反汇编和伪代码分析<br>自定义编码识别：准确识别出 Base64 的变体实现<br>编码逆向工程：深入理解编码逻辑并实现解码算法<br>通过仔细分析程序的编码表和处理逻辑，手动构建了对应的解码器，最终成功破解了 flag。</p>
<p>本文记录了个人解题思路和学习过程，旨在交流技术心得。如有错误欢迎指正！</p>
]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Reverse</tag>
        <tag>IDA Pro</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
</search>
